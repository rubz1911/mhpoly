name: Build static index

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate static index.html, sitemap.xml, robots.txt
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PY'
          import os, html, pathlib

          # Derive owner/repo and base URL for GitHub Pages
          repo_full = os.environ.get("GITHUB_REPOSITORY", "rubz1911/mhpoly")
          owner, repo = repo_full.split("/")
          base_path = f"/{repo}"
          base_url  = f"https://{owner}.github.io/{repo}"

          lib_dir = pathlib.Path("library")
          lib_dir.mkdir(exist_ok=True)

          # Find all .txt files in /library (UTF-8)
          files = sorted([p for p in lib_dir.glob("*.txt")], key=lambda p: p.name.lower())

          # ---- robots.txt ----
          robots_txt = f"""User-agent: *
Allow: /
Sitemap: {base_url}/sitemap.xml
"""
          pathlib.Path("robots.txt").write_text(robots_txt, encoding="utf-8")

          # ---- sitemap.xml ----
          urls = [f"{base_url}/"] + [f"{base_url}/library/{p.name}" for p in files]
          sm = ['<?xml version="1.0" encoding="UTF-8"?>',
                '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">']
          for u in urls:
            sm.append(f"  <url><loc>{html.escape(u)}</loc></url>")
          sm.append("</urlset>\n")
          pathlib.Path("sitemap.xml").write_text("\n".join(sm), encoding="utf-8")

          # ---- index.html (static, no JS) ----
          style = """
          :root{--pad:16px;--radius:16px;--shadow:0 8px 20px rgba(0,0,0,0.08);--muted:#666;}
          *{box-sizing:border-box;font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,"Helvetica Neue",Arial;}
          body{margin:0;background:#f7f7fb;color:#222;line-height:1.55;padding:24px;max-width:1000px;margin-inline:auto;}
          header{margin-bottom:20px;}
          h1{margin:0 0 6px 0;font-size:1.6rem;}
          .note{color:#666;font-size:0.95rem;margin-top:4px}
          .doc{background:#fff;border-radius:16px;box-shadow:0 8px 20px rgba(0,0,0,0.08);padding:16px;margin:18px 0;}
          .doc h2{margin:0 0 8px 0;font-size:1.15rem}
          .doc .meta{color:#666;font-size:0.9rem;margin-bottom:8px}
          .doc pre{white-space:pre-wrap;margin:0;overflow-wrap:anywhere}
          .btn{border:1px solid #ddd;background:#fafafa;border-radius:12px;padding:6px 10px;text-decoration:none;color:#222}
          .btn:hover{background:#f0f0f5}
          code{background:#f0f0f5;padding:2px 6px;border-radius:6px}
          nav ul{padding-left:20px;margin:8px 0}
          nav li{margin:4px 0}
          """

          head = f"""<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>MH Poly — Policy Library (Static)</title>
            <meta name="robots" content="index, follow">
            <link rel="canonical" href="{base_url}/" />
            <style>{style}</style>
          </head>
          <body>
            <header>
              <h1>MH Poly — Policy Library (Static)</h1>
              <div class="note">
                This page is statically generated on each push. All policy text is inlined below for crawler/copilot access.
              </div>
              <nav>
                <p><strong>Direct links (no JS):</strong></p>
                <ul>
          """

          for p in files:
            head += f'  <li><a href="{base_path}/library/{html.escape(p.name)}">{html.escape(p.name)}</a></li>\n'

          head += """    </ul>
              </nav>
            </header>
            <div id="docs">
          """

          parts = [head]

          if not files:
            parts.append('<article class="doc"><h2>No .txt files found</h2><pre>Place UTF-8 .txt files into /library/</pre></article>')
          else:
            for p in files:
              try:
                txt = p.read_text(encoding="utf-8", errors="replace")
              except Exception as e:
                txt = f"(Error reading file: {e})"
              parts.append(
                f'<article class="doc">'
                f'<h2>{html.escape(p.name)}</h2>'
                f'<div class="meta">'
                f'<a class="btn" href="{base_path}/library/{html.escape(p.name)}" download>Download</a> '
                f'<span class="note">Source: <code>{base_path}/library/{html.escape(p.name)}</code></span>'
                f'</div>'
                f'<pre>{html.escape(txt)}</pre>'
                f'</article>'
              )

          parts.append("""</div>
          </body>
          </html>
          """)

          pathlib.Path("index.html").write_text("".join(parts), encoding="utf-8")
          print("Wrote index.html, sitemap.xml, robots.txt")
          PY

      - name: Commit & push if changed
        shell: bash
        run: |
          set -e
          if [[ -n "$(git status --porcelain index.html sitemap.xml robots.txt)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add index.html sitemap.xml robots.txt
            git commit -m "Build static index (inline text + sitemap + robots)"
            git push
          else
            echo "No changes to commit."
          fi
